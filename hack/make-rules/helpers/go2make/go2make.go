/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package main

import (
	"context"
	"flag"
	"fmt"
	"log"
	"sort"
	"strings"
)

var repoRoot string

func main() {
	flag.Parse()

	pkgs, err := listPackages(context.TODO(), ".", nil,
		"-tags=ignore_autogenerated",
		"-deps", // allows us to load vendor/k8s.io/* as well
		"./...",
	)
	if err != nil {
		log.Fatal(err)
	}
	byImportPath := make(map[string]*Package) // to locate dependencies
	for _, pkg := range pkgs {
		if pkg.Error != nil {
			log.Fatalf("%s: %s", pkg.Error.Pos, pkg.Error.Err)
		}
		if pkg.Goroot {
			// Assume std deps are static.
			continue
		}
		byImportPath[pkg.ImportPath] = pkg
	}
	for _, pkg := range pkgs {
		if !strings.HasPrefix(pkg.ImportPath, "k8s.io/") {
			// Only generate for k8s packages.
			continue
		}
		saveImport(pkg, byImportPath)
	}
}

func saveImport(pkg *Package, byImportPath map[string]*Package) {
	// Emit a variable for each package.
	fmt.Printf("%s := ", pkg.ImportPath)

	// Packages depend on their own directories, their own files, and
	// transitive list of all deps' directories and files.
	all := map[string]struct{}{}
	all[pkg.Dir+"/"] = struct{}{}
	filesForPkg(pkg, all)
	// TODO: note that Imports is only direct imports, while Deps is all
	// transitive deps. Using the latter results in 10x larger output.
	// The old program does the equivalent of Imports, not Deps.
	for _, depPath := range pkg.Imports {
		dep := byImportPath[depPath]
		if dep == nil {
			continue
		}
		all[dep.Dir+"/"] = struct{}{}
		filesForPkg(dep, all)
	}
	// Sort and de-dup them.
	// TODO: de-duping is most likely unnecessary, since even with pkg.Deps
	// we will iterate over each dependency exactly once.
	files := flatten(all)
	for _, file := range files {
		fmt.Printf(" \\\n  %s", file)
	}
}

func filesForPkg(pkg *Package, all map[string]struct{}) {
	for _, file := range pkg.GoFiles {
		all[pkg.Dir+"/"+file] = struct{}{}
	}
}

func flatten(all map[string]struct{}) []string {
	list := make([]string, 0, len(all))
	for k := range all {
		list = append(list, k)
	}
	sort.Strings(list)
	return list
}
